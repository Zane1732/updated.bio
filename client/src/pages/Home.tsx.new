import { useEffect, useRef, useState } from "react";
import Highcharts from "highcharts";
import { apiRequest } from "@/lib/queryClient";

export default function Home() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [showOverlay, setShowOverlay] = useState(true);
  const audioRef = useRef<HTMLAudioElement>(null);
  const chartRef = useRef<Highcharts.Chart | null>(null);

  // Handle click to enter
  const handleEnter = () => {
    setShowOverlay(false);
    if (audioRef.current) {
      audioRef.current.play().catch(err => {
        console.error("Error playing audio:", err);
      });
    }
  };

  // Initialize wireframe background
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    let width: number, height: number;
    let points: Array<{
      x: number;
      y: number;
      vx: number;
      vy: number;
      color: string;
    }> = [];
    const numPoints = 80;
    const connectionDistance = 150;
    const pointSize = 1;
    
    const colors = {
      c1: '#60284A',
      c2: '#435177',
      c3: '#FFFFFF',
    };
    
    function resizeCanvas() {
      width = window.innerWidth;
      height = window.innerHeight;
      canvas.width = width;
      canvas.height = height;
      initPoints();
    }
    
    function initPoints() {
      points = [];
      for (let i = 0; i < numPoints; i++) {
        const colorKeys = Object.keys(colors);
        const colorKey = colorKeys[Math.floor(Math.random() * colorKeys.length)] as keyof typeof colors;
        
        points.push({
          x: Math.random() * width,
          y: Math.random() * height,
          vx: (Math.random() - 0.5) * 0.5,
          vy: (Math.random() - 0.5) * 0.5,
          color: colors[colorKey]
        });
      }
    }
    
    function drawPoints() {
      ctx.clearRect(0, 0, width, height);
      
      for (let i = 0; i < points.length; i++) {
        const point = points[i];
        
        point.x += point.vx;
        point.y += point.vy;
        
        if (point.x < 0 || point.x > width) point.vx *= -1;
        if (point.y < 0 || point.y > height) point.vy *= -1;
        
        ctx.beginPath();
        ctx.arc(point.x, point.y, pointSize, 0, Math.PI * 2);
        ctx.fillStyle = point.color;
        ctx.fill();
        
        for (let j = i + 1; j < points.length; j++) {
          const otherPoint = points[j];
          const dx = point.x - otherPoint.x;
          const dy = point.y - otherPoint.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < connectionDistance) {
            const gradient = ctx.createLinearGradient(
              point.x, point.y, otherPoint.x, otherPoint.y
            );
            gradient.addColorStop(0, point.color);
            gradient.addColorStop(1, otherPoint.color);
            
            ctx.beginPath();
            ctx.moveTo(point.x, point.y);
            ctx.lineTo(otherPoint.x, otherPoint.y);
            ctx.strokeStyle = gradient;
            ctx.globalAlpha = 1 - (distance / connectionDistance);
            ctx.stroke();
            ctx.globalAlpha = 1;
          }
        }
      }
      
      requestAnimationFrame(drawPoints);
    }
    
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();
    drawPoints();
    
    return () => {
      window.removeEventListener('resize', resizeCanvas);
    };
  }, []);

  // Initialize chart
  useEffect(() => {
    if (typeof Highcharts === 'undefined') {
      console.error('Highcharts not loaded');
      return;
    }

    chartRef.current = Highcharts.chart('graph', {
      chart: {
        type: 'line',
        backgroundColor: '#000000',
        style: {
          fontFamily: 'Courier New, monospace'
        }
      },
      credits: {
        enabled: false
      },
      title: {
        text: 'DSTAT',
        style: {
          color: '#ffffff'
        }
      },
      xAxis: {
        type: 'datetime',
        labels: {
          style: {
            color: '#ffffff'
          }
        },
        lineColor: '#ffffff',
        tickColor: '#ffffff'
      },
      yAxis: {
        labels: {
          style: {
            color: '#ffffff'
          }
        },
        gridLineColor: '#333333',
        lineColor: '#ffffff',
        tickColor: '#ffffff',
        title: {
          text: 'Requests',
          style: {
            color: '#ffffff'
          }
        }
      },
      series: [{
        name: 'Total Requests',
        color: '#ffffff',
        data: []
      }],
      legend: {
        enabled: false
      }
    } as any);

    const updateData = () => {
      apiRequest('GET', '/api/rps?' + Date.now(), undefined)
        .then(response => response.json())
        .then(data => {
          if (!chartRef.current) return;
          const x = Date.now();
          const y = data.c || 0;
          const series = chartRef.current.series[0];
          series.addPoint([x, y], true, series.data.length > 30);
        })
        .catch(error => {
          console.error("Error fetching data:", error);
        });
    };

    const interval = setInterval(updateData, 1000);
    return () => clearInterval(interval);
  }, []);

  // ASCII art for ZANE
  const zaneAsciiArt = `
  ..                                                               s                                                
  oec :                                 . uW8"                    ..                                          :8    
 @88888                ..    .     :    \`t888              u.    @L                                          .88    
 8"*88%       .u     .888: x888  x888.   8888   .    ...ue888b  9888i   .dL               .         u       :888ooo 
 8b.       ud8888.  ~\`8888~'888X\`?888f\`  9888.z88N   888R Y888r \`Y888k:*888.         .udR88N     us888u.  -*8888888 
u888888> :888'8888.   X888  888X '888>   9888  888E  888R I888>   888E  888I        <888'888k .@88 "8888"   8888    
 8888R   d888 '88%"   X888  888X '888>   9888  888E  888R I888>   888E  888I        9888 'Y"  9888  9888    8888    
 8888P   8888.+"      X888  888X '888>   9888  888E  888R I888>   888E  888I        9888      9888  9888    8888    
 *888>   8888L        X888  888X '888>   9888  888E u8888cJ888    888E  888I    .   9888      9888  9888   .8888Lu= 
 4888    '8888c. .+  "*88%""*88" '888!\` .8888  888"  "*888*P"    x888N><888'  .@8c  ?8888u../ 9888  9888   ^%888*   
 '888     "88888%      \`~    "    \`"\`    \`%888*%"      'Y"        "88"  888  '%888"  "8888P'  "888*""888"    'Y"    
  88R       "YP'                            "\`                          88F    ^*      "P'     ^Y"   ^Y'            
  88>                                                                  98"                                          
  48                                                                 ./"                                            
  '8                                                                ~\`  
`;

  return (
    <>
      <canvas ref={canvasRef} id="wireframe-bg"></canvas>
      
      {showOverlay && (
        <div 
          className="cte" 
          id="cte" 
          onClick={handleEnter}
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            background: 'rgba(0,0,0,.7)',
            backdropFilter: 'blur(8px)',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 1000,
            cursor: 'pointer',
            transition: 'opacity .5s ease',
          }}
        >
          <div 
            className="cte-text"
            style={{
              fontFamily: "'Poppins',sans-serif",
              fontWeight: 500,
              color: '#fff',
              fontSize: '24px',
              textAlign: 'center',
              userSelect: 'none',
            }}
          >
            Click to Enter
          </div>
        </div>
      )}
      
      <audio ref={audioRef} id="mainm" src="a.mp3" preload="auto"></audio>
      
      <div 
        className="mainl"
        style={{
          whiteSpace: 'pre',
          textAlign: 'center',
          marginBottom: '10px',
          width: '100%',
          fontSize: '.7em',
          lineHeight: 1.2,
          transform: 'scale(1.1,1)',
          overflowX: 'auto',
          maxWidth: '100%',
          position: 'relative',
          zIndex: 1,
        }}
      >
        {zaneAsciiArt}
      </div>
      
      <div 
        className="links"
        style={{
          display: 'flex',
          gap: '20px',
          justifyContent: 'center',
          padding: '10px',
          width: '90%',
          maxWidth: '500px',
          flexWrap: 'wrap',
          position: 'relative',
          zIndex: 1,
        }}
      >
        <a 
          href="https://github.com/udpcat" 
          target="_blank"
          style={{
            color: '#fff',
            textDecoration: 'none',
            fontSize: '18px',
            margin: '10px 0',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '8px 16px',
            border: '1px solid rgba(255,255,255,.1)',
            borderRadius: '4px',
            transition: 'all .3s ease',
            minWidth: '140px',
            background: 'transparent',
            position: 'relative',
            overflow: 'hidden',
            zIndex: 1,
          }}
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512" style={{ marginRight: '10px', width: '24px', height: '24px' }}>
            <path fill="#fff" d="M166 397c0 2-2 4-5 4-4 0-6-1-6-4 0-2 2-3 5-3 3-1 6 1 6 3zm-31-4c-1 2 1 4 4 5s6 0 6-2-1-5-4-5c-3-1-5 0-6 2zm44-2c-3 1-5 3-5 5 1 2 3 3 6 3 3-1 5-3 5-5s-3-3-6-3zM245 8A240 240 0 0 0 0 252c0 111 70 206 170 239 12 2 17-5 17-12v-61s-70 15-85-30c0 0-12-29-28-37 0 0-23-15 2-15 0 0 24 2 38 26 22 38 59 27 73 21 2-16 9-28 16-34-56-6-112-14-112-111 0-27 7-41 23-59-2-6-11-33 3-67 21-7 69 27 69 27a237 237 0 0 1 126 0s48-34 69-27c13 34 5 61 3 67 16 18 23 32 23 59 0 97-59 105-115 111 9 8 17 23 17 46v75c0 7 5 15 17 12a248 248 0 0 0-52-485z"/>
          </svg> 
          Github: udpcat
        </a>
        <a 
          href="https://t.me/udp_cat" 
          target="_blank"
          style={{
            color: '#fff',
            textDecoration: 'none',
            fontSize: '18px',
            margin: '10px 0',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '8px 16px',
            border: '1px solid rgba(255,255,255,.1)',
            borderRadius: '4px',
            transition: 'all .3s ease',
            minWidth: '140px',
            background: 'transparent',
            position: 'relative',
            overflow: 'hidden',
            zIndex: 1,
          }}
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512" style={{ marginRight: '10px', width: '24px', height: '24px' }}>
            <path fill="#fff" d="M248 8a248 248 0 1 0 0 496 248 248 0 0 0 0-496m115 169c-4 39-20 134-28 178-4 19-10 25-17 25-14 2-25-9-39-18l-56-38c-24-16-8-24 6-39 3-4 67-61 68-67l-1-4-5-1q-4 1-105 70-15 10-27 9c-9 0-26-5-38-9-16-5-28-7-27-16q1-7 18-14l145-62c69-29 83-34 92-34 2 0 7 1 10 3a11 11 0 0 1 4 7 44 44 0 0 1 0 10"/>
          </svg> 
          Telegram: udp_cat
        </a>
      </div>
      
      <div 
        className="line"
        style={{
          width: '60%',
          height: '1px',
          background: '#333',
          margin: '15px 0',
          position: 'relative',
          zIndex: 1,
        }}
      ></div>
      
      <div 
        className="stats"
        style={{
          backgroundColor: '#000',
          padding: '5px',
          width: '90%',
          maxWidth: '800px',
          margin: '10px auto',
          position: 'relative',
          zIndex: 1,
        }}
      >
        <div id="graph" style={{ width: '100%', height: '300px' }}></div>
      </div>

      <style>{`
        @media screen and (max-width: 768px) {
          .mainl {
            font-size: .5em;
            transform: scale(1, 1);
          }
          .links a {
            font-size: 16px;
            padding: 6px 12px;
          }
          #graph {
            height: 200px;
          }
        }
        
        @media screen and (max-width: 480px) {
          .mainl {
            font-size: .4em;
          }
          .cte-text {
            font-size: 18px;
          }
        }
        
        /* Link hover effects */
        .links a:hover {
          color: #fff;
          transform: translateY(-2px);
          border-color: rgba(255,255,255,0);
        }
        
        .links a::before {
          content: '';
          position: absolute;
          top: 50%;
          left: 50%;
          width: 200%;
          height: 200%;
          background: conic-gradient(
            #60284A, 
            #435177, 
            #FFFFFF, 
            #60284A
          );
          opacity: 0;
          transform: translate(-50%, -50%);
          transition: opacity 0.3s ease;
          z-index: -2;
          filter: blur(8px);
        }
        
        .links a::after {
          content: '';
          position: absolute;
          top: 1px;
          left: 1px;
          right: 1px;
          bottom: 1px;
          background: #000;
          border-radius: 3px;
          z-index: -1;
        }
        
        .links a:hover::before {
          opacity: 0.8;
          animation: rotateGlow 4s linear infinite;
        }
        
        @keyframes rotateGlow {
          0% {
            transform: translate(-50%, -50%) rotate(0deg);
          }
          100% {
            transform: translate(-50%, -50%) rotate(360deg);
          }
        }
      `}</style>
    </>
  );
}